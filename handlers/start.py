from __future__ import annotations
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import select

from database.database import get_session, get_sessionmaker, get_engine
from keyboards.menu import employee_menu
from models.users import User
from settings.config import settings
from utils.validators import validate_full_name, validate_dob

router = Router()
engine = get_engine(settings.DATABASE_URL, echo=True)
session_factory = get_sessionmaker(engine)

# --- FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
class Registration(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    full_name = State()
    position = State()
    dob = State()
    phone = State()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ FSM.
    """
    telegram_id = message.from_user.id

    async with get_session(session_factory) as session:
        user = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user_obj = user.scalars().first()

    if user_obj:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_obj.full_name}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞ üòä")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º FSM
    await state.set_state(Registration.full_name)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üòä\n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –§–ò–û.")


# 1. –ü–æ–ª—É—á–∞–µ–º –§–ò–û
@router.message(Registration.full_name)
async def process_full_name(message: Message, state: FSMContext):
    full_name = validate_full_name(message.text)
    if not full_name:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: –§–∞–º–∏–ª–∏—è –ò–º—è [–û—Ç—á–µ—Å—Ç–≤–æ]. –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã."
        )
        return
    await state.update_data(full_name=full_name)
    await state.set_state(Registration.position)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ê –∫–∞–∫–∞—è —É —Ç–µ–±—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å?")


# 2. –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
@router.message(Registration.position)
async def process_position(message: Message, state: FSMContext):
    position = message.text.strip().title()
    await state.update_data(position=position)
    await state.set_state(Registration.dob)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


@router.message(Registration.dob)
async def process_dob(message: Message, state: FSMContext):
    dob = validate_dob(message.text)
    if not dob:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑: –î–î.MM.–ì–ì–ì–ì")
        return
    await state.update_data(dob=dob)
    await state.set_state(Registration.phone)

    phone_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    await message.answer(
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=phone_kb
    )


@router.message(F.contact)
async def get_phone(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    phone_number = message.contact.phone_number
    telegram_id = message.from_user.id
    telegram_username = message.from_user.username

    data = await state.get_data()
    full_name = data.get("full_name")
    position = data.get("position")
    dob = data.get("dob")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async with get_session(session_factory) as session:
        new_user = User(
            telegram_id=telegram_id,
            full_name=full_name,
            position=position,
            role="employee",
            dob=dob,
            phone=phone_number,  # <--- —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä!
            telegram_username=telegram_username,  # <--- –∏ –Ω–∏–∫
            start_date=datetime.now(ZoneInfo("Asia/Krasnoyarsk")),
        )
        session.add(new_user)
        await session.commit()

    await state.clear()

    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üë§ –ò–º—è: {full_name}\n"
        f"üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
        f"üõ†Ô∏è –†–æ–ª—å: employee",
        reply_markup=employee_menu,
    )

    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {full_name}! üéâ\n"
        "–¢–≤–æ—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è. –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤!"
    )