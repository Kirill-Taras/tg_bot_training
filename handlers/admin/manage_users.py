from aiogram import F, Router, types

from database.database import get_engine, get_session, get_sessionmaker
from models.users import User
from settings.config import settings

router = Router()
engine = get_engine(settings.DATABASE_URL, echo=True)
session_factory = get_sessionmaker(engine)


# —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_users(message: types.Message):
    async with get_session(session_factory) as session:
        users = await session.execute(User.__table__.select())
        users = users.fetchall()

        if not users:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for u in users:
            text += f"ID: {u.id} | {u.full_name} | —Ä–æ–ª—å: {u.role}\n"
        text += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:"
        await message.answer(text, parse_mode="HTML")


# –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
@router.message(lambda msg: msg.text.isdigit())
async def user_action_menu(message: types.Message):
    user_id = int(message.text)
    async with get_session(session_factory) as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å {user.full_name}")],
                [types.KeyboardButton(text=f"‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å {user.full_name}")],
                [
                    types.KeyboardButton(
                        text=f"üéì –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É {user.full_name}"
                    )
                ],
            ],
            resize_keyboard=True,
        )
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è <b>{user.full_name}</b>:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )


# —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text.startswith("üóë –£–¥–∞–ª–∏—Ç—å"))
async def delete_user(message: types.Message):
    name = message.text.replace("üóë –£–¥–∞–ª–∏—Ç—å ", "")
    async with get_session(session_factory) as session:
        user = await session.execute(
            User.__table__.select().where(User.full_name == name)
        )
        user = user.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await session.delete(user)
        await session.commit()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —É–¥–∞–ª—ë–Ω.")


# —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å
@router.message(F.text.startswith("‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"))
async def change_role(message: types.Message):
    name = message.text.replace("‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å ", "")
    async with get_session(session_factory) as session:
        user = await session.execute(
            User.__table__.select().where(User.full_name == name)
        )
        user = user.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        new_role = "admin" if user.role != "admin" else "employee"
        user.role = new_role
        await session.commit()
        await message.answer(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")


# –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É
@router.message(F.text.startswith("üéì –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É"))
async def assign_internship(message: types.Message, bot):
    name = message.text.replace("üéì –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É ", "")
    async with get_session(session_factory) as session:
        user = await session.execute(
            User.__table__.select().where(User.full_name == name)
        )
        user = user.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user.role = "intern"
        await session.commit()

        # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            user.telegram_id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –∫–æ–º–∞–Ω–¥–µ! "
            "–ù–∞—á–Ω–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π ‚Äî –≤–æ—Ç –ø–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª üìò",
        )

        await message.answer(f"‚úÖ {name} —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–∂—ë—Ä.")
