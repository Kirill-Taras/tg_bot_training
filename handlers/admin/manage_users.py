from aiogram import F, Router, types
from aiogram.types import ReplyKeyboardMarkup

from database.database import get_engine, get_session, get_sessionmaker
from keyboards.menu import admin_menu
from models.users import User
from settings.config import settings

router = Router()
engine = get_engine(settings.DATABASE_URL, echo=True)
session_factory = get_sessionmaker(engine)


# --------------------------
# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# --------------------------
@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_users(message: types.Message):
    async with get_session(session_factory) as session:
        result = await session.execute(User.__table__.select())
        users = result.fetchall()

        if not users:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for u in users:
            text += f"ID: {u.id} | {u.full_name} | —Ä–æ–ª—å: {u.role}\n"

        # –ö–Ω–æ–ø–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
        for u in users:
            keyboard.keyboard.append(
                [types.KeyboardButton(text=f"üë§ –î–µ–π—Å—Ç–≤–∏—è {u.id} ‚Äî {u.full_name}")]
                + [[types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
            )

        await message.answer(
            text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Ä–æ–ª—å –∏–ª–∏ —Å—Ç–∞—Ç—É—Å:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )


# --------------------------
# –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# --------------------------
@router.message(F.text.startswith("üë§ –î–µ–π—Å—Ç–≤–∏—è"))
async def user_action_menu(message: types.Message):
    try:
        user_id = int(message.text.split()[-1])  # "üë§ –î–µ–π—Å—Ç–≤–∏—è {id}"
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    async with get_session(session_factory) as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [types.KeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å {user.id}")],
                [types.KeyboardButton(text=f"‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å {user.id}")],
                [types.KeyboardButton(text=f"üéì –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É {user.id}")],
                [
                    types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"),
                    types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                ],
            ],
        )
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è <b>{user.full_name}</b>:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )


# --------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# --------------------------
@router.message(F.text.startswith("üóë –£–¥–∞–ª–∏—Ç—å"))
async def delete_user(message: types.Message):
    try:
        user_id = int(message.text.split()[-1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return

    async with get_session(session_factory) as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await session.delete(user)
        await session.commit()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} —É–¥–∞–ª—ë–Ω.")


# --------------------------
# –°–º–µ–Ω–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# --------------------------
@router.message(F.text.startswith("‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"))
async def change_role(message: types.Message):
    try:
        user_id = int(message.text.split()[-1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return

    async with get_session(session_factory) as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        new_role = "admin" if user.role != "admin" else "employee"
        user.role = new_role
        await session.commit()
        await message.answer(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")


# --------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
# --------------------------
@router.message(F.text.startswith("üéì –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É"))
async def assign_internship(message: types.Message, bot):
    try:
        user_id = int(message.text.split()[-1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return

    async with get_session(session_factory) as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user.role = "intern"
        await session.commit()

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(f"‚úÖ {user.full_name} —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–∂—ë—Ä.")
        await bot.send_message(
            user.telegram_id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –∫–æ–º–∞–Ω–¥–µ! "
            "–ù–∞—á–Ω–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π ‚Äî –≤–æ—Ç –ø–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª üìò",
        )



@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
async def back_to_users(message: types.Message):
    await list_users(message)


@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_menu)