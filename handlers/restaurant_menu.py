from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
import json
import os

router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
with open("menu.json", "r", encoding="utf-8") as f:
    MENU = json.load(f)


def get_categories_kb():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    buttons = []
    for idx, cat in enumerate(MENU):
        buttons.append([InlineKeyboardButton(
            text=cat["category"],
            callback_data=f"cat:{idx}"  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        )])
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="back_main"
    )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_items_kb(category_idx: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–ª—é–¥–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    buttons = []
    category = MENU[category_idx]
    for idx, item in enumerate(category["items"]):
        buttons.append([InlineKeyboardButton(
            text=item["title"],
            callback_data=f"item:{category_idx}_{idx}"  # –∏–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –∏–Ω–¥–µ–∫—Å –±–ª—é–¥–∞
        )])
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_categories"
    )])
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="back_main"
    )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(F.text == "üçΩÔ∏è –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
async def menu_restaurant(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é"""
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_kb())


@router.callback_query(F.data.startswith("cat:"))
async def show_items(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–ª—é–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_idx = int(callback.data.split(":")[1])
    category_name = MENU[category_idx]["category"]
    await callback.message.edit_text(
        f"üç¥ {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:",
        reply_markup=get_items_kb(category_idx)
    )


@router.callback_query(F.data.startswith("item:"))
async def show_item(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –±–ª—é–¥–∞"""
    category_idx, item_idx = map(int, callback.data.split(":")[1].split("_"))
    item = MENU[category_idx]["items"][item_idx]

    caption = (
        f"<b>{item['title']}</b>\n"
        f"<i>{item['desc']}</i>\n"
        f"ü•Ñ {item['weight']}\n"
        f"üí∞ {item['price']} ‚ÇΩ"
    )
    photo_path = item.get("photo")
    if photo_path and os.path.exists(photo_path):
        await callback.message.answer_photo(
            FSInputFile(photo_path),
            caption=caption,
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(caption, parse_mode="HTML")


@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await callback.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_kb())


@router.callback_query(F.data == "back_main")
async def back_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await callback.message.answer("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
